{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"84-3c5b7mLPS"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import scipy.stats as stats\n","import math\n","\n","density = 100\n","\n","def generate_gaussian():\n","    mu = np.random.uniform(low=5,high=10)\n","    variance = 1\n","    sigma = math.sqrt(variance)\n","    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 25)\n","    y = stats.norm.pdf(x, mu, sigma) * 50\n","\n","\n","    pref_x = np.array(range(density))\n","    new_y = np.interp(pref_x,x,y)\n","\n","    new_y += np.random.uniform(low=0,high=2,size=(density,))\n","\n","    return (pref_x,new_y)\n","\n","\n","\n","def f(x,a,tau):\n","    return a * np.exp(-x/tau)\n","\n","\n","def generate_decay_curve(tau_min=1,tau_high=50):\n","    a = np.random.uniform(low=0.1,high=high)\n","    tau = np.random.uniform(low=1,high=tau_high)\n","    x = np.array(range(density))\n","    y = f(x,a,tau)\n","\n","    return (y,a,tau)\n","    \n","\n","# decay lifetimes\n","# 30\n","def generate_dataset_one():\n","    (x,y) = generate_gaussian()\n","    (dec_y,a,t) = generate_decay_curve(tau_high=100)\n","    z = np.convolve(y,dec_y)[:density]\n","    z += np.random.uniform(0,0.2)\n","\n","    input = np.concatenate((z,y))\n","    output = np.array((a,t,0,0,0,0))\n","\n","    return (input,output)"]},{"cell_type":"code","source":["# decay lifetimes\n","# 1-15 15-100\n","\n","def generate_dataset_two():\n","    (x,y) = generate_gaussian()\n","    \n","    (dec_y,a,t) = generate_decay_curve(high=1,tau_high=15)\n","    (dec_y_2,a2,t2) = generate_decay_curve(high=1,tau_high=100)\n","\n","    new_dec = dec_y + dec_y_2\n","\n","    z = np.convolve(y,new_dec)[:density]\n","    z += np.random.uniform(0,0.2)\n","\n","    input = np.concatenate((z,y))\n","    output = np.array((a,t,a2,t2,0,0))\n","    output = np.array(sorted([[a,t],[a2,t2],[0,0]]))\n","    output = output.reshape(6)\n","\n","    return (input,output)"],"metadata":{"id":"lPzB6AjSW1u9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## 1-10 10-30 30-100\n","\n","def generate_dataset_three(): \n","    (x,y) = generate_gaussian()\n","    (dec_y,a,t) = generate_decay_curve(tau_high=5)\n","    (dec_y_2,a2,t2) = generate_decay_curve(tau_high=15)\n","    (dec_y_3,a3,t3) = generate_decay_curve(high=50)\n","\n","    new_dec = dec_y + dec_y_2 + dec_y_3\n","\n","    z = np.convolve(y,new_dec)[:density]\n","    z += np.random.uniform(0,0.2)\n","\n","    input = np.concatenate((z,y))\n","    output = np.array(sorted([[a,t],[a2,t2],[a3,t3]]))\n","    # output = np.array([output[0][0],output[1][0],output[2][0],output[0][1],output[1][1],output[2][1]])\n","    output = output.reshape(6)\n","\n","    return (input,output)"],"metadata":{"id":"Q9y1bMKtXy22"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EbR3K0p8mUF8"},"outputs":[],"source":["\"\"\n","x_list = []\n","y_list = []\n","for i in range(100000):\n","\n","    y = np.random.randint(0,3)\n","  \n","    if y == 0:\n","      (x,y) = generate_dataset_one()\n","    \n","      x_list.append(x)\n","      y_list.append([1.,0.,0.])\n","    elif y == 1:\n","      (x,y) = generate_dataset_two()\n","\n","      \n","      \n","      x_list.append(x)\n","      y_list.append([0.,1.,0.])\n","\n","    else:\n","      (x,y) = generate_dataset_three()\n","      \n","      x_list.append(x)\n","      y_list.append([0.,0.,1.])\n","\n"]},{"cell_type":"code","source":["print(y_list[6])\n","y_list = np.array(y_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PCLMVIBvxt_B","executionInfo":{"status":"ok","timestamp":1644795079722,"user_tz":0,"elapsed":391,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"15707c40-8cae-448e-f1fd-77eab8eacb70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.0, 0.0, 1.0]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hbgNkuaAm4RA"},"outputs":[],"source":["# import tensorflow as tf\n","# from sklearn.model_selection import train_test_split\n","# import sklearn\n","\n","# x_list = np.array(x_list)\n","# y_list = np.array(y_list)\n","\n","\n","# # x_list = np.log(x_list)\n","\n","# x_list, y_list = sklearn.utils.shuffle(x_list,y_list)\n","\n","\n","# import matplotlib.pyplot as plt\n","\n","# x = np.array(range(density))\n","# plt.plot(x,x_list[0][:density])\n","# plt.plot(x,x_list[0][density:])\n","\n","\n","# a = y_list[0][0]\n","# tau = y_list[0][1]\n","# a2 = y_list[0][2]\n","# tau2 = y_list[0][3]\n","# a3 = y_list[0][4]\n","# tau3 = y_list[0][5]\n","\n","# print(a,a2,a3)\n","\n","\n","\n","# plt.plot(x,f(x,a,tau))\n","# plt.plot(x,f(x,a2,tau2))\n","# # plt.plot(x,f(x,a3,tau3))\n","# plt.show()\n","\n","\n"]},{"cell_type":"code","source":["import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","\n","x_list = tf.keras.utils.normalize(x_list)\n","# y_list = tf.keras.utils.normalize(y_list)\n","\n","print(x_list.shape)\n","print(y_list.shape)\n","\n","\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(x_list, y_list, test_size=0.10, random_state=40)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Khp6zsKhol2e","executionInfo":{"status":"ok","timestamp":1644795087664,"user_tz":0,"elapsed":3363,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"0c174caa-84eb-4fbc-b563-b5cb01d9e486"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(100000, 200)\n","(100000, 3)\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CPHyv5EymzWj"},"outputs":[],"source":["import keras\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras import layers\n","\n","\n","model = Sequential()\n","model.add(Dense(400, input_dim=density*2))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(100, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(3, activation='relu'))"]},{"cell_type":"code","source":["def ftf(a,tau):\n","  return a*tf.math.exp(np.array(range(100))/tau)\n","\n","def error_function(y,y_real):\n","\n","  # a,tau = tf.split(y,num_or_size_of_splits=2,axis=1)\n","  # a_real,tau_real = tf.split(y,num_or_size_of_splits=2,axis=1)\n","\n","  return tf.math.reduce_sum(tf.math.abs(y-y_real))\n","\n"],"metadata":{"id":"yY5ay5zMXyP8"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YPS1N9kGnRFI","outputId":"a04bb0e9-901d-4855-93a6-db417f0a4c94","executionInfo":{"status":"ok","timestamp":1644796195448,"user_tz":0,"elapsed":1102377,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","563/563 [==============================] - 31s 54ms/step - loss: 0.2462 - accuracy: 0.3499 - val_loss: 0.2147 - val_accuracy: 0.4444\n","Epoch 2/50\n","563/563 [==============================] - 23s 40ms/step - loss: 0.2049 - accuracy: 0.4899 - val_loss: 0.1723 - val_accuracy: 0.5797\n","Epoch 3/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.1776 - accuracy: 0.5786 - val_loss: 0.1602 - val_accuracy: 0.6246\n","Epoch 4/50\n","563/563 [==============================] - 23s 40ms/step - loss: 0.1688 - accuracy: 0.6137 - val_loss: 0.1517 - val_accuracy: 0.6619\n","Epoch 5/50\n","563/563 [==============================] - 23s 40ms/step - loss: 0.1571 - accuracy: 0.6629 - val_loss: 0.1362 - val_accuracy: 0.7254\n","Epoch 6/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.1356 - accuracy: 0.7357 - val_loss: 0.1083 - val_accuracy: 0.7868\n","Epoch 7/50\n","563/563 [==============================] - 23s 42ms/step - loss: 0.1173 - accuracy: 0.7857 - val_loss: 0.0938 - val_accuracy: 0.8201\n","Epoch 8/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.1062 - accuracy: 0.8103 - val_loss: 0.0867 - val_accuracy: 0.8276\n","Epoch 9/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0990 - accuracy: 0.8278 - val_loss: 0.0826 - val_accuracy: 0.8325\n","Epoch 10/50\n","563/563 [==============================] - 21s 38ms/step - loss: 0.0949 - accuracy: 0.8362 - val_loss: 0.0801 - val_accuracy: 0.8448\n","Epoch 11/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0923 - accuracy: 0.8417 - val_loss: 0.0803 - val_accuracy: 0.8366\n","Epoch 12/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0888 - accuracy: 0.8487 - val_loss: 0.0745 - val_accuracy: 0.8489\n","Epoch 13/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0869 - accuracy: 0.8524 - val_loss: 0.0734 - val_accuracy: 0.8562\n","Epoch 14/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0853 - accuracy: 0.8555 - val_loss: 0.0723 - val_accuracy: 0.8579\n","Epoch 15/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0830 - accuracy: 0.8592 - val_loss: 0.0703 - val_accuracy: 0.8632\n","Epoch 16/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0822 - accuracy: 0.8612 - val_loss: 0.0685 - val_accuracy: 0.8649\n","Epoch 17/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0805 - accuracy: 0.8640 - val_loss: 0.0671 - val_accuracy: 0.8691\n","Epoch 18/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0781 - accuracy: 0.8692 - val_loss: 0.0654 - val_accuracy: 0.8720\n","Epoch 19/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0772 - accuracy: 0.8697 - val_loss: 0.0659 - val_accuracy: 0.8694\n","Epoch 20/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0776 - accuracy: 0.8691 - val_loss: 0.0643 - val_accuracy: 0.8721\n","Epoch 21/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0756 - accuracy: 0.8727 - val_loss: 0.0640 - val_accuracy: 0.8756\n","Epoch 22/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0742 - accuracy: 0.8760 - val_loss: 0.0680 - val_accuracy: 0.8657\n","Epoch 23/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0732 - accuracy: 0.8779 - val_loss: 0.0639 - val_accuracy: 0.8727\n","Epoch 24/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0734 - accuracy: 0.8764 - val_loss: 0.0628 - val_accuracy: 0.8756\n","Epoch 25/50\n","563/563 [==============================] - 21s 38ms/step - loss: 0.0714 - accuracy: 0.8815 - val_loss: 0.0618 - val_accuracy: 0.8761\n","Epoch 26/50\n","563/563 [==============================] - 21s 38ms/step - loss: 0.0710 - accuracy: 0.8817 - val_loss: 0.0690 - val_accuracy: 0.8630\n","Epoch 27/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0707 - accuracy: 0.8822 - val_loss: 0.0612 - val_accuracy: 0.8782\n","Epoch 28/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0696 - accuracy: 0.8834 - val_loss: 0.0618 - val_accuracy: 0.8786\n","Epoch 29/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0700 - accuracy: 0.8819 - val_loss: 0.0646 - val_accuracy: 0.8713\n","Epoch 30/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0686 - accuracy: 0.8850 - val_loss: 0.0572 - val_accuracy: 0.8874\n","Epoch 31/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0680 - accuracy: 0.8873 - val_loss: 0.0604 - val_accuracy: 0.8811\n","Epoch 32/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0668 - accuracy: 0.8890 - val_loss: 0.0572 - val_accuracy: 0.8888\n","Epoch 33/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0668 - accuracy: 0.8882 - val_loss: 0.0582 - val_accuracy: 0.8863\n","Epoch 34/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0664 - accuracy: 0.8899 - val_loss: 0.0611 - val_accuracy: 0.8763\n","Epoch 35/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0659 - accuracy: 0.8899 - val_loss: 0.0566 - val_accuracy: 0.8876\n","Epoch 36/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0653 - accuracy: 0.8913 - val_loss: 0.0575 - val_accuracy: 0.8882\n","Epoch 37/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0649 - accuracy: 0.8922 - val_loss: 0.0582 - val_accuracy: 0.8856\n","Epoch 38/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0648 - accuracy: 0.8926 - val_loss: 0.0587 - val_accuracy: 0.8825\n","Epoch 39/50\n","563/563 [==============================] - 22s 40ms/step - loss: 0.0634 - accuracy: 0.8948 - val_loss: 0.0598 - val_accuracy: 0.8814\n","Epoch 40/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0645 - accuracy: 0.8918 - val_loss: 0.0595 - val_accuracy: 0.8824\n","Epoch 41/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0632 - accuracy: 0.8955 - val_loss: 0.0589 - val_accuracy: 0.8834\n","Epoch 42/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0635 - accuracy: 0.8949 - val_loss: 0.0564 - val_accuracy: 0.8882\n","Epoch 43/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0622 - accuracy: 0.8967 - val_loss: 0.0540 - val_accuracy: 0.8939\n","Epoch 44/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0621 - accuracy: 0.8963 - val_loss: 0.0532 - val_accuracy: 0.8958\n","Epoch 45/50\n","563/563 [==============================] - 22s 38ms/step - loss: 0.0619 - accuracy: 0.8973 - val_loss: 0.0552 - val_accuracy: 0.8913\n","Epoch 46/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0613 - accuracy: 0.8985 - val_loss: 0.0530 - val_accuracy: 0.8961\n","Epoch 47/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0610 - accuracy: 0.8984 - val_loss: 0.0527 - val_accuracy: 0.8986\n","Epoch 48/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0615 - accuracy: 0.8977 - val_loss: 0.0603 - val_accuracy: 0.8803\n","Epoch 49/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0614 - accuracy: 0.8974 - val_loss: 0.0575 - val_accuracy: 0.8844\n","Epoch 50/50\n","563/563 [==============================] - 22s 39ms/step - loss: 0.0606 - accuracy: 0.8996 - val_loss: 0.0549 - val_accuracy: 0.8901\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd3a01f3050>"]},"metadata":{},"execution_count":22}],"source":["model.compile(optimizer= tf.keras.optimizers.Adam(learning_rate=1e-5), loss=\"mean_squared_error\", metrics=[\"accuracy\"])\n","model.fit(X_train, y_train, batch_size=128, epochs=50, validation_split=0.2)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-TYn_kpdp8Nl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644796196141,"user_tz":0,"elapsed":741,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"e868c73f-a1fe-4d34-aa59-cc74f2a0f795"},"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 2s 6ms/step - loss: 0.0553 - accuracy: 0.8930\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.055261023342609406, 0.8930000066757202]"]},"metadata":{},"execution_count":23}],"source":["model.evaluate(X_test,y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dhTzzYJX3oRA"},"outputs":[],"source":["m_list = []\n","n_list = []\n","for i in range(5):\n","  (m,n) = generate_dataset_one()\n","  m_list.append(m)\n","  n_list.append(n)\n","\n","\n","m = np.array(m_list)\n","m = tf.keras.utils.normalize(m)\n","# m = np.log(m)\n","n = np.array(n_list)\n","\n","# print(n_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aVo1WPRf35zp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644796196144,"user_tz":0,"elapsed":17,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"e6cfeadf-c132-4e91-e38b-9b996e3a5a47"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.98794913 0.         0.        ]\n"," [0.12222707 0.7875439  0.        ]\n"," [0.81874704 0.03053101 0.        ]\n"," [0.93773675 0.         0.        ]\n"," [0.8836534  0.         0.        ]]\n"]}],"source":["\n","pred_n = model.predict(m)\n","print(pred_n)"]},{"cell_type":"code","source":["m_list = []\n","n_list = []\n","for i in range(5):\n","  (m,n) = generate_dataset_two()\n","  m_list.append(m)\n","  n_list.append(n)\n","\n","\n","m = np.array(m_list)\n","m = tf.keras.utils.normalize(m)\n","# m = np.log(m)\n","n = np.array(n_list)\n","\n","# print(n_list)\n","\n","pred_n = model.predict(m)\n","print(pred_n)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hVaiokSAnSrA","executionInfo":{"status":"ok","timestamp":1644796196473,"user_tz":0,"elapsed":338,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"e81626ab-443b-4548-ea0d-24d2ab5c5301"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.         0.65299493 0.24535617]\n"," [0.         0.87563074 0.02174945]\n"," [0.         0.824794   0.05039972]\n"," [0.         0.90836805 0.        ]\n"," [0.         0.91067654 0.        ]]\n"]}]},{"cell_type":"code","source":["m_list = []\n","n_list = []\n","for i in range(50):\n","  (m,n) = generate_dataset_three()\n","  m_list.append(m)\n","  n_list.append(n)\n","\n","\n","m = np.array(m_list)\n","m = tf.keras.utils.normalize(m)\n","# m = np.log(m)\n","n = np.array(n_list)\n","\n","# print(n_list)\n","\n","pred_n = model.predict(m)\n","print(pred_n)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"-uMWD1nRnfla","executionInfo":{"status":"error","timestamp":1649968345045,"user_tz":-60,"elapsed":14,"user":{"displayName":"Madhan Rajan","userId":"11949160929832065290"}},"outputId":"953e91fc-128e-4902-85e5-45e9ef459b59"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-560549c34789>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mn_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m   \u001b[0;34m(\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_dataset_three\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m   \u001b[0mm_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0mn_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'generate_dataset_three' is not defined"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XeRYfRbZ4A4N"},"outputs":[],"source":["# n_ = np.absolute(pred_n-n)/ n\n","\n","# N_ = 1 - n_\n","\n","# print(np.average(N_, axis=0))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e0U6sNll8yw5","executionInfo":{"status":"ok","timestamp":1644796198788,"user_tz":0,"elapsed":2321,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3070ac8f-4af8-4963-f83a-79197d23e125"},"outputs":[{"output_type":"stream","name":"stdout","text":["INFO:tensorflow:Assets written to: mymodel/assets\n"]}],"source":["model.save(\"mymodel\")"]}],"metadata":{"accelerator":"TPU","colab":{"collapsed_sections":[],"name":"13 feb","provenance":[{"file_id":"1dzyDXFpzavCg-8beUBTlvDa9fQx2L-Aa","timestamp":1644779370871},{"file_id":"1g1Lfc54hLeV-o7TRP7poHzXNGNCkWoBO","timestamp":1643579564167},{"file_id":"1d2bsw8hKS6LZCLOTy-u_0eiVvaFSznbd","timestamp":1643569030471}],"authorship_tag":"ABX9TyNq0yV4hRRQNwZaXzaCQIyv"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
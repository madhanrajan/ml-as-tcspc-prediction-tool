{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"PZCFJZaZsjW6","executionInfo":{"status":"ok","timestamp":1647875727155,"user_tz":0,"elapsed":13451,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":65},"outputId":"6a9a158b-1000-4919-faa7-dffceb2b31da"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-510c2c0a-a9d4-4bd4-94a1-eda6ecc8c2f4\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-510c2c0a-a9d4-4bd4-94a1-eda6ecc8c2f4\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving irf1000.npy to irf1000.npy\n"]}],"source":["from google.colab import files\n","\n","fl = files.upload()\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l3tpMHivs-GZ","executionInfo":{"status":"ok","timestamp":1647880220599,"user_tz":0,"elapsed":183,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e45ffce1-e3d8-45b8-8014-8b00c07ff128"},"outputs":[{"output_type":"stream","name":"stdout","text":["99\n"]}],"source":["\n","import numpy as np\n","\n","irf = np.load(\"irf1000.npy\")\n","\n","print(np.argmax(irf))\n","\n","irf = irf[np.argmax(irf):]\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"84-3c5b7mLPS"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import scipy.stats as stats\n","import math\n","\n","density = len(irf)\n","\n","def generate_gaussian():\n","    \n","    x = np.array(range(density))\n","    y = irf\n","\n","    return (x,y)\n","\n","\n","\n","def f(x,a,tau):\n","    return a * np.exp(-x/tau)\n","\n","\n","def generate_decay_curve(low_a=0.1,high_a=1,low_tau=1,high_tau=50):\n","    a = np.random.uniform(low=low_a,high=high_a)\n","    tau = np.random.uniform(low=low_tau,high=high_tau)\n","    x = np.array(range(density))\n","    y = f(x,a,tau)\n","\n","    return (y,a,tau)\n","\n","def generate_decay_curve(low_a=0.1,high_a=1,low_tau=1,high_tau=50):\n","    a = np.random.uniform(low=low_a,high=high_a)\n","    tau = np.random.uniform(low=low_tau,high=high_tau)\n","    x = np.array(range(density))\n","    y = f(x,a,tau)\n","\n","    return (y,a,tau)\n","    \n","\n","def generate_dataset_one():\n","    (x,y) = generate_gaussian()\n","    (dec_y,a,t) = generate_decay_curve()\n","    z = np.convolve(y,dec_y)[:density]\n","    # z += np.random.uniform(0,0.2)\n","    z = z + np.random.uniform(low=-z/5,high=z/5,size=density)\n","\n","\n","    t = t/100\n","\n","    input = np.concatenate((z,y))\n","    output = np.array((a,t,0,0,0,0))\n","\n","    return (input,output)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lPzB6AjSW1u9"},"outputs":[],"source":["def generate_dataset_two():\n","    (x,y) = generate_gaussian()\n","    \n","\n","    (dec_y,a,t) = generate_decay_curve(low_tau=0.1,high_tau=10)\n","    (dec_y_2,a2,t2) = generate_decay_curve(low_tau=10.1,high_tau=100)\n","\n","    t = t/10\n","    t2 = t2/100\n","\n","    new_dec = dec_y + dec_y_2\n","\n","    z = np.convolve(y,new_dec)[:density]\n","    # z += np.random.uniform(0,0.2)\n","    z = z + np.random.uniform(low=-z/7,high=z/7,size=density)\n","\n","\n","    input = np.concatenate((z,y))\n","    output = np.array((a,t,a2,t2,0,0))\n","    output = np.array([t,t2,0])\n","    # output = output.reshape(3)\n","\n","    return (input,output)"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","x = np.array(range(density))\n","\n","x_list, y_list = generate_dataset_three()\n","\n","plt.plot(x,x_list[:density])\n","plt.plot(x,x_list[density:])\n","\n","\n","a = 0.1\n","tau = y_list[0]\n","a2 = 0.1\n","tau2 = y_list[1]\n","a3 = 0.1\n","tau3 = y_list[2]\n","\n","print(tau,tau2,tau3)\n","\n","\n","plt.plot(x,f(x,a,tau) + f(x,a2,tau2) + f(x,a3,tau3))\n","plt.plot(x,f(x,a2,tau2))\n","# plt.plot(x,f(x,a3,tau3))\n","plt.show()\n","print(x_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":314},"id":"aZwZ6u4OLaz4","executionInfo":{"status":"ok","timestamp":1647880288351,"user_tz":0,"elapsed":430,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"b2d860c1-c5b8-4129-ca5d-de367d395344"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5059914478117334 0.5055967351718229 0.7826939336700968\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[338.63391278 480.56175306 600.72200672 ...   2.16016016   2.95995996\n","   0.        ]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q9y1bMKtXy22"},"outputs":[],"source":["def generate_dataset_three():\n","    (x,y) = generate_gaussian()\n","    (dec_y,a,t) = generate_decay_curve(low_tau=0.1,high_tau=5)\n","    (dec_y_2,a2,t2) = generate_decay_curve(low_tau=5,high_tau=15)\n","    (dec_y_3,a3,t3) = generate_decay_curve(low_tau=15,high_tau=100)\n","    \n","\n","    t = t/(5-0.1)\n","    t2 = t2/(15-5)\n","    t3 = t3/(100-15)\n","\n","    new_dec = dec_y + dec_y_2 + dec_y_3\n","\n","    z = np.convolve(y,new_dec)[:density]\n","    z = z + np.random.uniform(low=-z/5,high=z/5,size=density)\n","\n","    # z = np.log(z)\n","    # y = np.log(y)\n","\n","    input = np.concatenate((z,y))\n","    output = np.array([a,a2,a3])\n","    # output = np.array([output[0][0],output[1][0],output[2][0],output[0][1],output[1][1],output[2][1]])\n","    # output = output.reshape(6)\n","\n","    return (input,output)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EbR3K0p8mUF8"},"outputs":[],"source":["\n","x_list = []\n","y_list = []\n","for i in range(100000):\n","\n","  \n","    # (x,y) = generate_dataset_one()\n","    \n","    # x_list.append(x)\n","    # y_list.append(y)\n","\n","    (x,y) = generate_dataset_three()\n","\n","    \n","    \n","    x_list.append(x)\n","    y_list.append(y)\n","\n","    # (x,y) = generate_dataset_three()\n","    \n","    # x_list.append(x)\n","    # y_list.append(y)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":218,"status":"ok","timestamp":1647880444745,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"},"user_tz":0},"id":"PCLMVIBvxt_B","outputId":"f96c6fa0-44c1-439e-c43e-0f370e807c91"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0.92000591 0.30723397 0.70028519]\n"]}],"source":["print(y_list[2])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VTRWFQ8D4s1O"},"outputs":[],"source":["import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","import sklearn\n","\n","x_list = np.array(x_list)\n","y_list = np.array(y_list)\n","\n","\n","# x_list = np.log(x_list)\n","\n","x_list, y_list = sklearn.utils.shuffle(x_list,y_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hbgNkuaAm4RA"},"outputs":[],"source":["\n","\n","\n","# import matplotlib.pyplot as plt\n","\n","# x = np.array(range(density))\n","# plt.plot(x,x_list[0][:density])\n","# plt.plot(x,x_list[0][density:])\n","\n","\n","# # a = y_list[0][0]\n","# tau = y_list[0][0]\n","# # a2 = y_list[0][2]\n","# tau2 = y_list[0][1]\n","# # a3 = y_list[0][4]\n","# tau3 = y_list[0][2]\n","\n","# print(a,a2,a3)\n","\n","\n","\n","# plt.plot(x,f(x,a,tau))\n","# plt.plot(x,f(x,a2,tau2))\n","# # plt.plot(x,f(x,a3,tau3))\n","# plt.show()\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2049,"status":"ok","timestamp":1647880454279,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"},"user_tz":0},"id":"Khp6zsKhol2e","outputId":"2f50dbd0-cfb6-4410-aa64-10874d889acd"},"outputs":[{"output_type":"stream","name":"stdout","text":["(100000, 1802)\n","(100000, 3)\n"]}],"source":["\n","x_list = tf.keras.utils.normalize(x_list)\n","# y_list = tf.keras.utils.normalize(y_list)\n","\n","print(x_list.shape)\n","print(y_list.shape)\n","\n","\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(x_list, y_list, test_size=0.10, random_state=40)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CPHyv5EymzWj"},"outputs":[],"source":["import keras\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras import layers\n","\n","\n","model = Sequential()\n","model.add(Dense(400, input_dim=density*2))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(100, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(3, activation='relu'))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yY5ay5zMXyP8"},"outputs":[],"source":["def ftf(a,tau):\n","  return a*tf.math.exp(np.array(range(100))/tau)\n","\n","def error_function(y,y_real):\n","\n","  # a,tau = tf.split(y,num_or_size_of_splits=2,axis=1)\n","  # a_real,tau_real = tf.split(y,num_or_size_of_splits=2,axis=1)\n","\n","  return tf.math.reduce_sum(tf.math.abs(y-y_real))\n","\n"]},{"cell_type":"code","execution_count":66,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":625744,"status":"ok","timestamp":1647884867084,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"},"user_tz":0},"id":"YPS1N9kGnRFI","outputId":"d4ccc235-6255-44c9-e649-b85b381767c6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","563/563 [==============================] - 37s 61ms/step - loss: 0.0270 - accuracy: 0.6707 - val_loss: 0.0200 - val_accuracy: 0.6912\n","Epoch 2/20\n","563/563 [==============================] - 31s 54ms/step - loss: 0.0270 - accuracy: 0.6745 - val_loss: 0.0205 - val_accuracy: 0.6939\n","Epoch 3/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0269 - accuracy: 0.6750 - val_loss: 0.0203 - val_accuracy: 0.6733\n","Epoch 4/20\n","563/563 [==============================] - 31s 55ms/step - loss: 0.0268 - accuracy: 0.6733 - val_loss: 0.0196 - val_accuracy: 0.6952\n","Epoch 5/20\n","563/563 [==============================] - 31s 55ms/step - loss: 0.0266 - accuracy: 0.6753 - val_loss: 0.0198 - val_accuracy: 0.6917\n","Epoch 6/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0265 - accuracy: 0.6747 - val_loss: 0.0199 - val_accuracy: 0.6893\n","Epoch 7/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0265 - accuracy: 0.6741 - val_loss: 0.0198 - val_accuracy: 0.6918\n","Epoch 8/20\n","563/563 [==============================] - 31s 55ms/step - loss: 0.0264 - accuracy: 0.6756 - val_loss: 0.0208 - val_accuracy: 0.6883\n","Epoch 9/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0262 - accuracy: 0.6768 - val_loss: 0.0195 - val_accuracy: 0.6911\n","Epoch 10/20\n","563/563 [==============================] - 30s 53ms/step - loss: 0.0263 - accuracy: 0.6757 - val_loss: 0.0200 - val_accuracy: 0.6960\n","Epoch 11/20\n","563/563 [==============================] - 32s 57ms/step - loss: 0.0261 - accuracy: 0.6770 - val_loss: 0.0195 - val_accuracy: 0.6969\n","Epoch 12/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0260 - accuracy: 0.6749 - val_loss: 0.0202 - val_accuracy: 0.6902\n","Epoch 13/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0259 - accuracy: 0.6786 - val_loss: 0.0204 - val_accuracy: 0.6911\n","Epoch 14/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0260 - accuracy: 0.6740 - val_loss: 0.0196 - val_accuracy: 0.6916\n","Epoch 15/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0258 - accuracy: 0.6764 - val_loss: 0.0199 - val_accuracy: 0.6822\n","Epoch 16/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0259 - accuracy: 0.6760 - val_loss: 0.0200 - val_accuracy: 0.6919\n","Epoch 17/20\n","563/563 [==============================] - 30s 54ms/step - loss: 0.0257 - accuracy: 0.6753 - val_loss: 0.0195 - val_accuracy: 0.6873\n","Epoch 18/20\n","563/563 [==============================] - 31s 55ms/step - loss: 0.0257 - accuracy: 0.6762 - val_loss: 0.0195 - val_accuracy: 0.6947\n","Epoch 19/20\n","563/563 [==============================] - 31s 55ms/step - loss: 0.0256 - accuracy: 0.6782 - val_loss: 0.0196 - val_accuracy: 0.6957\n","Epoch 20/20\n","563/563 [==============================] - 32s 56ms/step - loss: 0.0254 - accuracy: 0.6784 - val_loss: 0.0195 - val_accuracy: 0.6859\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fa19087f510>"]},"metadata":{},"execution_count":66}],"source":["model.compile(optimizer= tf.keras.optimizers.Adam(learning_rate=1e-5), loss=\"mean_squared_error\", metrics=[\"accuracy\"])\n","model.fit(X_train, y_train, batch_size=128, epochs=20, validation_split=0.2)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-TYn_kpdp8Nl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647269232585,"user_tz":0,"elapsed":3135,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"10c842be-a570-42e2-ec1c-c2f104fe057c"},"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 3s 9ms/step - loss: 0.0475 - accuracy: 0.8035\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.047512609511613846, 0.8034999966621399]"]},"metadata":{},"execution_count":24}],"source":["model.evaluate(X_test,y_test)"]},{"cell_type":"code","execution_count":71,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":190,"status":"ok","timestamp":1647884966934,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"},"user_tz":0},"id":"dhTzzYJX3oRA","outputId":"be23b59f-8a68-49b9-d458-13dca6d0f767"},"outputs":[{"output_type":"stream","name":"stdout","text":["[array([0.26653902, 0.13799291, 0.62762001]), array([0.36781391, 0.68190877, 0.97876728]), array([0.7066182 , 0.34037978, 0.17298185]), array([0.37394487, 0.55987647, 0.74609677]), array([0.97033533, 0.5394093 , 0.64971923])]\n"]}],"source":["m_list = []\n","n_list = []\n","for i in range(5):\n","  (m,n) = generate_dataset_three()\n","  m_list.append(m)\n","  n_list.append(n)\n","\n","\n","m = np.array(m_list)\n","m = tf.keras.utils.normalize(m)\n","# m = np.log(m)\n","n = np.array(n_list)\n","\n","print(n_list)"]},{"cell_type":"code","execution_count":72,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":170,"status":"ok","timestamp":1647884968249,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"},"user_tz":0},"id":"aVo1WPRf35zp","outputId":"8d235d58-780f-424e-8b1f-3e4c050e746f"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.25984538 0.23618226 0.6077268 ]\n"," [0.24491625 0.7493441  0.9493954 ]\n"," [0.6767049  0.4209708  0.20864192]\n"," [0.48125112 0.52564263 0.8067066 ]\n"," [0.7764244  0.78749686 0.6755676 ]]\n"]}],"source":["\n","pred_n = model.predict(m)\n","print(pred_n)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XeRYfRbZ4A4N"},"outputs":[],"source":["!mkdir -p saved_model"]},{"cell_type":"code","execution_count":69,"metadata":{"id":"e0U6sNll8yw5","executionInfo":{"status":"ok","timestamp":1647884897671,"user_tz":0,"elapsed":471,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}}},"outputs":[],"source":["\n","model.save(\"gdrive/MyDrive/mymodel21Marchpredicta.h5\")"]},{"cell_type":"code","execution_count":70,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":200,"status":"ok","timestamp":1647884901571,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"},"user_tz":0},"id":"xghcU9wAE1Lu","outputId":"2e213d7d-7568-4866-8cf1-6c22d7935f6e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Physics.pdf',\n"," '0081_Statement_Of_Entry.pdf',\n"," '0620_s10_qp_62.pdf',\n"," 'Contact Information.gform',\n"," 'Untitled spreadsheet.gsheet',\n"," 'Untitled document (9).gdoc',\n"," 'Google_Stock_Price_Train.gsheet',\n"," 'Untitled document (8).gdoc',\n"," 'Untitled document (7).gdoc',\n"," 'KCL Accommodation Offer - Madhanrajan.pdf',\n"," 'KCL Accommodation Offer - Madhanrajan.gdoc',\n"," 'KCL CAS Letter - Madhanrajan VARADHARAJAN.pdf',\n"," '2018_19 Residence Agreement.pdf',\n"," 'Student_Confirmation_of_Study_Letter_1852451.pdf',\n"," 'Startup Video',\n"," 'IMG_0376.JPG',\n"," 'Formula-sheet.pdf',\n"," 'FINAL Investigating the relationship between the period of simple  pendulum.docx',\n"," 'FINAL Investigating the relationship between the period of simple  pendulum.gdoc',\n"," 'Shian Housing Association website TEXT for HOME PAGE.docx',\n"," 'Shian Housing Association website TEXT for HOME PAGE.gdoc',\n"," \"Madhanrajan's Resume (1).pdf\",\n"," 'Gurantor Form.pdf',\n"," \"Madhan's Resume.pdf\",\n"," 'Untitled form.gform',\n"," 'Madhanrajan Varadharajan Reports Summary - 23andMe.pdf',\n"," 'Classroom',\n"," 'Advantage Education Malaysia.gform',\n"," 'snapshot2.jpg',\n"," 'snapshot2.png',\n"," \"Madhanrajan's Resume.pdf\",\n"," 'cold calling.gdoc',\n"," 'Untitled document (6).gdoc',\n"," 'stock.gdoc',\n"," 'stock2info.gdoc',\n"," 'stock2info.pdf',\n"," 'Untitled document (5).gdoc',\n"," 'Untitled document (4).gdoc',\n"," 'Trader Insight Pitch.gdoc',\n"," 'Untitled document (3).gdoc',\n"," 'Untitled document (2).gdoc',\n"," 'Untitled document (1).gdoc',\n"," '4 2 2021 .gdoc',\n"," 'Untitled document.gdoc',\n"," '8 2 2021.gdoc',\n"," 'ps2.docx',\n"," 'ps3.gdoc',\n"," 'Notability (2)',\n"," 'Notability (1)',\n"," 'Notability',\n"," 'Coversheet.docx',\n"," \"Madhanrajan's CV.pdf\",\n"," 'Curation',\n"," 'Colab Notebooks',\n"," 'Idea Factory 2022.docx',\n"," 'mymodel14March.h5',\n"," 'mymodelpredicta.h5',\n"," 'mymodel21MarchPeakt.h5',\n"," 'mymodel21Marchpredicta.h5']"]},"metadata":{},"execution_count":70}],"source":["import os\n","\n","os.listdir(\"gdrive/MyDrive\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wV8Pvwa9FXGn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647795011822,"user_tz":0,"elapsed":910,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"90d804cf-0916-421c-c94e-b3cd62aedca4"},"outputs":[{"output_type":"stream","name":"stdout","text":["interpolated_array.npy\tsample_data\n"]}],"source":["!ls"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gCXdo52yoLMp","executionInfo":{"status":"ok","timestamp":1647882576092,"user_tz":0,"elapsed":16902,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"fa433b89-26c3-4c92-f52d-7866ad567534"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["  import os\n","\n","os.listdir(\"gdrive/MyDrive\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5MAp2hupoqHE","executionInfo":{"status":"ok","timestamp":1647794970040,"user_tz":0,"elapsed":497,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"6f1bdb3d-bd89-4e99-e6be-8426617a84b0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['mymodelpredicta.h5']"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":[""],"metadata":{"id":"VvddgbClqF4O"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"TPU","colab":{"collapsed_sections":[],"name":"21 March- Predict alpha from peak","provenance":[{"file_id":"1G7-pOJpNwUHxUiCt9vBTI7OhpAcStnBD","timestamp":1647875692346},{"file_id":"1KXKLTmahbzzdtGBwB-T84vrLXo8bi6_x","timestamp":1647792840177},{"file_id":"1XvfWufcgwFbznY5f0mNEKqYfoqBaTELy","timestamp":1647268261741},{"file_id":"1dzyDXFpzavCg-8beUBTlvDa9fQx2L-Aa","timestamp":1646946949513},{"file_id":"1g1Lfc54hLeV-o7TRP7poHzXNGNCkWoBO","timestamp":1643579564167},{"file_id":"1d2bsw8hKS6LZCLOTy-u_0eiVvaFSznbd","timestamp":1643569030471}],"authorship_tag":"ABX9TyPr/lXT4RzGRBpKulwMDEOr"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"84-3c5b7mLPS"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import scipy.stats as stats\n","import math\n","\n","density = 100\n","\n","def generate_gaussian():\n","    mu = np.random.uniform(low=5,high=10)\n","    variance = 1\n","    sigma = math.sqrt(variance)\n","    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 25)\n","    y = stats.norm.pdf(x, mu, sigma) * 50\n","\n","\n","    pref_x = np.array(range(density))\n","    new_y = np.interp(pref_x,x,y)\n","\n","    new_y += np.random.uniform(low=0,high=2,size=(density,))\n","\n","    return (pref_x,new_y)\n","\n","\n","\n","def f(x,a,tau):\n","    return a * np.exp(-x/tau)\n","\n","\n","def generate_decay_curve(high=5,tau_high=50):\n","    a = np.random.uniform(low=0.1,high=high)\n","    tau = np.random.uniform(low=1,high=tau_high)\n","    x = np.array(range(density))\n","    y = f(x,a,tau)\n","\n","    return (y,a,tau)\n","    \n","\n","def generate_dataset_one():\n","    (x,y) = generate_gaussian()\n","    (dec_y,a,t) = generate_decay_curve(high=20)\n","    z = np.convolve(y,dec_y)[:density]\n","    z += np.random.uniform(0,0.2)\n","\n","    input = np.concatenate((z,y))\n","    output = np.array((a,t,0,0,0,0))\n","\n","    return (input,output)"]},{"cell_type":"code","source":["def generate_dataset_two():\n","    (x,y) = generate_gaussian()\n","    \n","    (dec_y,a,t) = generate_decay_curve(high=5)\n","    (dec_y_2,a2,t2) = generate_decay_curve(high=5)\n","\n","    new_dec = dec_y + dec_y_2\n","\n","    z = np.convolve(y,new_dec)[:density]\n","    z += np.random.uniform(0,0.2)\n","\n","    input = np.concatenate((z,y))\n","    output = np.array((a,t,a2,t2,0,0))\n","    output = np.array(sorted([[a,t],[a2,t2],[a3,t3]]))\n","    output = output.reshape(6)\n","\n","    return (input,output)"],"metadata":{"id":"lPzB6AjSW1u9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def generate_dataset_three():\n","    (x,y) = generate_gaussian()\n","    (dec_y,a,t) = generate_decay_curve(high=5)\n","    (dec_y_2,a2,t2) = generate_decay_curve(high=5)\n","    (dec_y_3,a3,t3) = generate_decay_curve(high=5)\n","\n","    new_dec = dec_y + dec_y_2 + dec_y_3\n","\n","    z = np.convolve(y,new_dec)[:density]\n","    z += np.random.uniform(0,0.2)\n","\n","    input = np.concatenate((z,y))\n","    output = np.array(sorted([[a,t],[a2,t2],[a3,t3]]))\n","    output = np.array([output[0][0],output[1][0],output[2][0],output[0][1],output[1][1],output[2][1]])\n","    # output = output.reshape(6)\n","\n","    return (input,output)"],"metadata":{"id":"Q9y1bMKtXy22"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EbR3K0p8mUF8"},"outputs":[],"source":["\"\"\n","x_list = []\n","y_list = []\n","for i in range(100000):\n","\n","    np.random\n","  \n","    # (x,y) = generate_dataset_one()\n","    \n","    # x_list.append(x)\n","    # y_list.append(y)\n","\n","    (x,y) = generate_dataset_three()\n","\n","    \n","    \n","    x_list.append(x)\n","    y_list.append(y)\n","\n","    # (x,y) = generate_dataset_three()\n","    \n","    # x_list.append(x)\n","    # y_list.append(y)\n","\n"]},{"cell_type":"code","source":["print(y_list[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PCLMVIBvxt_B","executionInfo":{"status":"ok","timestamp":1644162159881,"user_tz":0,"elapsed":33,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"1215f287-c403-44fa-d4df-59a24e8b741a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 0.98354544  1.58338211  2.82072398 39.69927467 22.04120052 25.45812659]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":3709,"status":"ok","timestamp":1644162163565,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"},"user_tz":0},"id":"hbgNkuaAm4RA","outputId":"2378924c-ad40-432b-9f5a-8c8374d5a668"},"outputs":[{"output_type":"stream","name":"stdout","text":["1.34157978032841 4.590728801314046 5.6228638419527925\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","import sklearn\n","\n","x_list = np.array(x_list)\n","y_list = np.array(y_list)\n","\n","\n","# x_list = np.log(x_list)\n","\n","x_list, y_list = sklearn.utils.shuffle(x_list,y_list)\n","\n","\n","import matplotlib.pyplot as plt\n","\n","x = np.array(range(density))\n","plt.plot(x,x_list[0][:density])\n","plt.plot(x,x_list[0][density:])\n","\n","\n","a = y_list[0][0]\n","tau = y_list[0][1]\n","a2 = y_list[0][2]\n","tau2 = y_list[0][3]\n","a3 = y_list[0][4]\n","tau3 = y_list[0][5]\n","\n","print(a,a2,a3)\n","\n","\n","\n","plt.plot(x,f(x,a,tau))\n","plt.plot(x,f(x,a2,tau2))\n","# plt.plot(x,f(x,a3,tau3))\n","plt.show()\n","\n","\n"]},{"cell_type":"code","source":["\n","x_list = tf.keras.utils.normalize(x_list)\n","# y_list = tf.keras.utils.normalize(y_list)\n","\n","print(x_list.shape)\n","print(y_list.shape)\n","\n","\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(x_list, y_list, test_size=0.10, random_state=40)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Khp6zsKhol2e","executionInfo":{"status":"ok","timestamp":1644162163892,"user_tz":0,"elapsed":335,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"e1f732e2-391b-4968-d331-5a679a49ecbd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(100000, 200)\n","(100000, 6)\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CPHyv5EymzWj"},"outputs":[],"source":["import keras\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras import layers\n","\n","\n","model = Sequential()\n","model.add(Dense(400, input_dim=density*2))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(400, activation='relu'))\n","model.add(Dense(100, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(6, activation='relu'))"]},{"cell_type":"code","source":["def ftf(a,tau):\n","  return a*tf.math.exp(np.array(range(100))/tau)\n","\n","def error_function(y,y_real):\n","\n","  # a,tau = tf.split(y,num_or_size_of_splits=2,axis=1)\n","  # a_real,tau_real = tf.split(y,num_or_size_of_splits=2,axis=1)\n","\n","  return tf.math.reduce_sum(tf.math.abs(y-y_real))\n","\n"],"metadata":{"id":"yY5ay5zMXyP8"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YPS1N9kGnRFI","outputId":"471073db-fce7-4157-eb77-efea70a60c99"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n"," 51/563 [=>............................] - ETA: 42s - loss: 4194.3833 - accuracy: 0.4350"]}],"source":["model.compile(optimizer= tf.keras.optimizers.Adam(learning_rate=1e-5), loss=error_function, metrics=[\"accuracy\"])\n","model.fit(X_train, y_train, batch_size=128, epochs=50, validation_split=0.2)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-TYn_kpdp8Nl"},"outputs":[],"source":["model.evaluate(X_test,y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dhTzzYJX3oRA","outputId":"af3010d8-cf8c-456b-cf11-b05a72ce3a36","executionInfo":{"status":"ok","timestamp":1644167314017,"user_tz":0,"elapsed":217,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[array([ 1.73633243,  2.23933945,  4.0736737 , 36.50124891, 34.42196311,\n","       15.84378823]), array([ 0.24734773,  0.71135304,  2.0010057 , 31.0101722 , 37.39110255,\n","       16.62009306]), array([ 1.90859957,  2.99109321,  4.83655872, 25.59778822, 10.56052228,\n","        9.28153748]), array([ 1.89761325,  2.28309791,  4.32845286,  4.15569103, 42.34898057,\n","       35.26686074]), array([2.81320122, 3.85920437, 4.52001828, 8.90914724, 9.11148113,\n","       3.73098418])]\n"]}],"source":["m_list = []\n","n_list = []\n","for i in range(5):\n","  (m,n) = generate_dataset_three()\n","  m_list.append(m)\n","  n_list.append(n)\n","\n","\n","m = np.array(m_list)\n","m = tf.keras.utils.normalize(m)\n","# m = np.log(m)\n","n = np.array(n_list)\n","\n","print(n_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aVo1WPRf35zp","executionInfo":{"status":"ok","timestamp":1644167315543,"user_tz":0,"elapsed":307,"user":{"displayName":"Madhan Rajan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11949160929832065290"}},"outputId":"3ccff091-e44b-4c4e-cee3-e9bb5b01d96c"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.         2.4122715  3.5448198 24.123642  23.734653  23.775335 ]\n"," [ 0.         2.3986955  3.4923525 23.16623   21.442781  20.195864 ]\n"," [ 0.         2.2934034  3.5657656 16.385818  12.755271  11.840083 ]\n"," [ 0.         2.3318007  3.5338047 24.172956  24.629015  30.16051  ]\n"," [ 0.         2.272164   3.6275055 14.467089   8.377192   6.0165944]]\n"]}],"source":["\n","pred_n = model.predict(m)\n","print(pred_n)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XeRYfRbZ4A4N"},"outputs":[],"source":["n_ = np.absolute(pred_n-n)/ n\n","\n","N_ = 1 - n_\n","\n","print(np.average(N_, axis=0))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e0U6sNll8yw5"},"outputs":[],"source":["model.save(\"mymodel\")"]}],"metadata":{"accelerator":"TPU","colab":{"collapsed_sections":[],"name":"3setsofdata","provenance":[{"file_id":"1g1Lfc54hLeV-o7TRP7poHzXNGNCkWoBO","timestamp":1643579564167},{"file_id":"1d2bsw8hKS6LZCLOTy-u_0eiVvaFSznbd","timestamp":1643569030471}],"authorship_tag":"ABX9TyMF1gckn/jDw6BAkTtv0SWz"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}